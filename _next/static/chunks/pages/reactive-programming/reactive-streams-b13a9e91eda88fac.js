(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1946],{6833:function(e,r,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/reactive-programming/reactive-streams",function(){return s(841)}])},841:function(e,r,s){"use strict";s.r(r),s.d(r,{__toc:function(){return c}});var a=s(5893),i=s(2673),t=s(373),n=s(8426);s(9128);var o=s(2643);let c=[{depth:2,value:"Reactive Streams - Publisher, Subscriber 개념, 예제",id:"reactive-streams---publisher-subscriber-개념-예제"},{depth:2,value:"참고",id:"참고"},{depth:2,value:"Publisher, Subscriber, Supscription",id:"publisher-subscriber-supscription"},{depth:2,value:"Hot Publisher, Cold Publisher",id:"hot-publisher-cold-publisher"},{depth:2,value:"e.g.",id:"eg"}];function _createMdxContent(e){let r=Object.assign({h2:"h2",ul:"ul",li:"li",p:"p",a:"a",blockquote:"blockquote",pre:"pre",code:"code",span:"span"},(0,o.a)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"reactive-streams---publisher-subscriber-개념-예제",children:"Reactive Streams - Publisher, Subscriber 개념, 예제"}),"\n",(0,a.jsx)(r.h2,{id:"참고",children:"참고"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams",children:"reactive streams github"}),", ",(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm",children:"reactive-streams-jvm"})]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.a,{href:"https://www.reactive-streams.org/",children:"reactive streams classes"})}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"https://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Publisher.html",children:"Publisher"})," , ",(0,a.jsx)(r.a,{href:"https://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Subscriber.html",children:"Subscriber"}),", ",(0,a.jsx)(r.a,{href:"https://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Subscription.html",children:"Subscription"})]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Publisher.java",children:"Publisher.java"})," , ",(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Subscriber.java",children:"Subscriber.java"})," , ",(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Subscription.java",children:"Subscription.java"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(r.h2,{id:"publisher-subscriber-supscription",children:"Publisher, Subscriber, Supscription"}),"\n",(0,a.jsxs)(r.blockquote,{children:["\n",(0,a.jsx)(r.p,{children:"참고"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"https://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Publisher.html",children:"Publisher"})," , ",(0,a.jsx)(r.a,{href:"https://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Subscriber.html",children:"Subscriber"}),", ",(0,a.jsx)(r.a,{href:"https://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Subscription.html",children:"Subscription"})]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Publisher.java",children:"Publisher.java"})," , ",(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Subscriber.java",children:"Subscriber.java"})," , ",(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Subscription.java",children:"Subscription.java"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(r.p,{children:["Publisher 는 Subscriber 를 등록할 수 있습니다. Subscriber 는 Publisher 에 자기 자신을 등록하기 위해 Publisher::subscribe(Subscriber) 메서드를 실행해서 자기 자신을 등록합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Publisher.java",children:"Publisher.java"})," 의 코드는 아래와 같이 되어있습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(r.pre,{"data-language":"java","data-theme":"default",children:(0,a.jsxs)(r.code,{"data-language":"java","data-theme":"default",children:[(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"package"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"org"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"reactivestreams"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"interface"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"Publisher"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"<"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"T"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"> {"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"subscribe"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"Subscriber"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"<"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"?"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"super"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"T"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"> s);"})]}),"\n",(0,a.jsx)(r.span,{className:"line",children:(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(r.p,{children:["Subscriber 는 Subscriber::onSubscribe(Subscrition) 을 통해서 Publisher 가 수락한 Subscription 객체를 수신합니다. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Subscriber.java",children:"Subscriber.java"})," 의 코드는 아래와 같습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(r.pre,{"data-language":"java","data-theme":"default",children:(0,a.jsxs)(r.code,{"data-language":"java","data-theme":"default",children:[(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"package"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"org"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"reactivestreams"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"interface"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"Subscriber"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"<"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"T"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"> {"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"onSubscribe"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"Subscription"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" s);"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"onNext"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"T"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" t);"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"onError"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"Throwable"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" t);"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"onComplete"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"();"})]}),"\n",(0,a.jsx)(r.span,{className:"line",children:(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,a.jsxs)(r.p,{children:["Subscriber 객체는 onNext(T) 를 통해서 계속해서 구독하고 있는 이벤트를 수신합니다. 그리고 onError(Throwable) 과 onComplete() 는 최종적으로 단 한번 호출되는데, 예외가 발생했을 경우에는 onError(Throwable) 을 통해 종료가 되고, 정상적으로 종료될 때에는 onComplete() 를 통해서 종료됩니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(r.p,{children:["Subscription 객체는 Subscriber 가 Publisher 에게 자신을 subscribe(Subscriber) 할 때 Publisher 가 생성하는 객체이며, 이 것을 Subscriber의 onSubscribe(Subscription) 의 인자값으로 전달해주는 객체입니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"https://github.com/reactive-streams/reactive-streams-jvm/blob/master/api/src/main/java/org/reactivestreams/Subscription.java",children:"Subscription.java"})," 의 코드는 아래와 같습니다."]}),"\n",(0,a.jsx)(r.pre,{"data-language":"java","data-theme":"default",children:(0,a.jsxs)(r.code,{"data-language":"java","data-theme":"default",children:[(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"package"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"org"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-punctuation)"},children:"."}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"reactivestreams"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"interface"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"Subscription"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" {"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"request"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"("}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"long"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" n);"})]}),"\n",(0,a.jsxs)(r.span,{className:"line",children:[(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"    "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"public"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-keyword)"},children:"void"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-token-function)"},children:"cancel"}),(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"();"})]}),"\n",(0,a.jsx)(r.span,{className:"line",children:(0,a.jsx)(r.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,a.jsxs)(r.p,{children:["request 함수는 backpressure 를 조절하는 데에 사용됩니다. 그리고 cancel 은 onNext() 작업을 중단(취소)할수 있도록 Subscrition 객체를 이용해서 이벤트의 흐름을 취소할 때 사용되는 메서드입니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(r.h2,{id:"hot-publisher-cold-publisher",children:"Hot Publisher, Cold Publisher"}),"\n",(0,a.jsxs)(r.p,{children:["Hot Publisher 는 subscriber 가 없는 상태에서도 데이터를 생성해서 stream 에 이벤트를 push 하는 것을 의미합니다. 모든 subscriber 들에게 같은 데이터를 전달합니다. 예를 들면 facebook 의 타임라인이 다른 사람들에게도 전파되는 것과 같은 현상을 예로 들 수 있습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(r.p,{children:["Cold Publisher 는 subscribe 를 하는 순간부터 stream 이벤트가 시작되는 것을 의미합니다. subscriber 에 맞춰서 데이터 스트림을 제공하는 것이 가능합니다. 예를 들면 API 요청 처리, 파일 읽기 작업을 예로 들 수 있습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(r.h2,{id:"eg",children:"e.g."})]})}let l={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,o.a)(),e.components);return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/reactive-programming/reactive-streams.mdx",route:"/reactive-programming/reactive-streams",timestamp:1710901104e3,pageMap:[{kind:"Folder",name:"concurrent-programming-basic",route:"/concurrent-programming-basic",children:[{kind:"MdxPage",name:"blocking-vs-nonblocking",route:"/concurrent-programming-basic/blocking-vs-nonblocking"},{kind:"MdxPage",name:"completable-future",route:"/concurrent-programming-basic/completable-future"},{kind:"MdxPage",name:"completable-stage",route:"/concurrent-programming-basic/completable-stage"},{kind:"MdxPage",name:"intro",route:"/concurrent-programming-basic/intro"},{kind:"MdxPage",name:"sync-vs-async",route:"/concurrent-programming-basic/sync-vs-async"},{kind:"Meta",data:{intro:"Intro","sync-vs-async":"동기 vs 비동기","blocking-vs-nonblocking":"블로킹 vs 논 블로킹","completable-future":"CompletableFuture","completable-stage":"CompletableStage"}}]},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"kotlin-coroutine",route:"/kotlin-coroutine",children:[{kind:"MdxPage",name:"intro",route:"/kotlin-coroutine/intro"},{kind:"Meta",data:{intro:"Intro"}}]},{kind:"Folder",name:"nio-and-aio",route:"/nio-and-aio",children:[{kind:"MdxPage",name:"intro",route:"/nio-and-aio/intro"},{kind:"MdxPage",name:"java-io-java-nio-java-aio",route:"/nio-and-aio/java-io-java-nio-java-aio"},{kind:"MdxPage",name:"java-nio-socket-communication",route:"/nio-and-aio/java-nio-socket-communication"},{kind:"MdxPage",name:"what-is-aio",route:"/nio-and-aio/what-is-aio"},{kind:"MdxPage",name:"what-is-nio",route:"/nio-and-aio/what-is-nio"},{kind:"Meta",data:{intro:"Intro","java-io-java-nio-java-aio":"Java IO,NIO,AIO","what-is-nio":"NIO 의 개념, 특징, 주요 클래스","java-nio-socket-communication":"Java NIO 소켓통신","what-is-aio":"AIO 의 개념, 특징, 예제"}}]},{kind:"Folder",name:"r2dbc-mysql",route:"/r2dbc-mysql",children:[{kind:"MdxPage",name:"example",route:"/r2dbc-mysql/example"},{kind:"MdxPage",name:"intro",route:"/r2dbc-mysql/intro"},{kind:"MdxPage",name:"what-is-r2dbc",route:"/r2dbc-mysql/what-is-r2dbc"},{kind:"Meta",data:{intro:"Intro","what-is-r2dbc":"R2DBC 란?",example:"예제"}}]},{kind:"Folder",name:"reactive-mongodb",route:"/reactive-mongodb",children:[{kind:"MdxPage",name:"example",route:"/reactive-mongodb/example"},{kind:"MdxPage",name:"intro",route:"/reactive-mongodb/intro"},{kind:"Meta",data:{intro:"Intro",example:"예제"}}]},{kind:"Folder",name:"reactive-programming",route:"/reactive-programming",children:[{kind:"MdxPage",name:"intro",route:"/reactive-programming/intro"},{kind:"MdxPage",name:"java-nio-bad-point-and-solution",route:"/reactive-programming/java-nio-bad-point-and-solution"},{kind:"MdxPage",name:"netflix-rxjava-story",route:"/reactive-programming/netflix-rxjava-story"},{kind:"MdxPage",name:"proactor-pattern",route:"/reactive-programming/proactor-pattern"},{kind:"MdxPage",name:"reactive-streams-backpressure",route:"/reactive-programming/reactive-streams-backpressure"},{kind:"MdxPage",name:"reactive-streams-libraries",route:"/reactive-programming/reactive-streams-libraries"},{kind:"MdxPage",name:"reactive-streams",route:"/reactive-programming/reactive-streams"},{kind:"MdxPage",name:"reactor-pattern",route:"/reactive-programming/reactor-pattern"},{kind:"MdxPage",name:"what-is-epoll",route:"/reactive-programming/what-is-epoll"},{kind:"MdxPage",name:"what-is-reactive",route:"/reactive-programming/what-is-reactive"},{kind:"Meta",data:{intro:"intro","what-is-reactive":"Reactive란?","netflix-rxjava-story":"Netflix RxJava 이야기","reactive-streams":"Reactive Streams - Publisher, Subscriber 개념, 예제","reactive-streams-libraries":"Reactive Streams 라이브러리들","reactive-streams-backpressure":"Spring Webflux 의 배압(Backpressure)","java-nio-bad-point-and-solution":"Java NIO 의 논블로킹 방식 동기연산의 문제점과 해결책, 멀티플렉싱","what-is-epoll":"epoll 이란?","reactor-pattern":"reactor 패턴","proactor-pattern":"proactor 패턴"}}]},{kind:"Folder",name:"server-sent-event",route:"/server-sent-event",children:[{kind:"MdxPage",name:"example",route:"/server-sent-event/example"},{kind:"MdxPage",name:"intro",route:"/server-sent-event/intro"},{kind:"MdxPage",name:"what-is-sse",route:"/server-sent-event/what-is-sse"},{kind:"Meta",data:{intro:"Intro","what-is-sse":"SSE (Server Sent Event) 의 개념",example:"예제코드"}}]},{kind:"Folder",name:"spring-cloud-reactive-circuitbreaker",route:"/spring-cloud-reactive-circuitbreaker",children:[{kind:"MdxPage",name:"intro",route:"/spring-cloud-reactive-circuitbreaker/intro"},{kind:"MdxPage",name:"reactive-circuit-breaker-basic",route:"/spring-cloud-reactive-circuitbreaker/reactive-circuit-breaker-basic"},{kind:"Meta",data:{intro:"Introduce","reactive-circuit-breaker-basic":"Reactive Cricuit Breaker"}}]},{kind:"Folder",name:"spring-cloud-stream-and-kafka",route:"/spring-cloud-stream-and-kafka",children:[{kind:"MdxPage",name:"intro",route:"/spring-cloud-stream-and-kafka/intro"},{kind:"MdxPage",name:"kafka-basic",route:"/spring-cloud-stream-and-kafka/kafka-basic"},{kind:"MdxPage",name:"kafka-docker-compose",route:"/spring-cloud-stream-and-kafka/kafka-docker-compose"},{kind:"MdxPage",name:"spring-cloud-stream-kafka-binder",route:"/spring-cloud-stream-and-kafka/spring-cloud-stream-kafka-binder"},{kind:"MdxPage",name:"spring-cloud-stream",route:"/spring-cloud-stream-and-kafka/spring-cloud-stream"},{kind:"Meta",data:{intro:"Intro","kafka-basic":"Kafka 의 주요 개념들","kafka-docker-compose":"Kafak 로컬 개발환경 (docker-compose)","spring-cloud-stream":"Spring Cloud Stream","spring-cloud-stream-kafka-binder":"Spring Cloud Stream Kafka Binder"}}]},{kind:"Folder",name:"spring-webflux",route:"/spring-webflux",children:[{kind:"MdxPage",name:"annotated-controller",route:"/spring-webflux/annotated-controller"},{kind:"MdxPage",name:"codec",route:"/spring-webflux/codec"},{kind:"MdxPage",name:"dispatcher-handler-communication-spring-webflux",route:"/spring-webflux/dispatcher-handler-communication-spring-webflux"},{kind:"MdxPage",name:"intro",route:"/spring-webflux/intro"},{kind:"MdxPage",name:"servlet-stack-vs-reactive-stack",route:"/spring-webflux/servlet-stack-vs-reactive-stack"},{kind:"MdxPage",name:"spring-mvc-vs-spring-webflux",route:"/spring-webflux/spring-mvc-vs-spring-webflux"},{kind:"Meta",data:{intro:"Intro","servlet-stack-vs-reactive-stack":"Servlet Stack vs Reactive Stack","spring-mvc-vs-spring-webflux":"Spring MVC vs Spring Webflux","dispatcher-handler-communication-spring-webflux":"DispatcherHandler 와 Spring Webflux","annotated-controller":"Annotated Controller",codec:"Codec"}}]},{kind:"Folder",name:"webflux-websocket",route:"/webflux-websocket",children:[{kind:"MdxPage",name:"example",route:"/webflux-websocket/example"},{kind:"MdxPage",name:"intro",route:"/webflux-websocket/intro"},{kind:"Meta",data:{intro:"Intro",example:"예제"}}]},{kind:"Meta",data:{index:"Introduction","concurrent-programming-basic":"동시성 프로그래밍 개념들","nio-and-aio":"NIO, AIO","reactive-programming":"Reactive Programming","spring-webflux":"Spring Webflux","spring-cloud-stream-and-kafka":"Spring Cloud Stream & Kafka","spring-cloud-reactive-circuitbreaker":"Spring Cloud Reactive Circuit Breaker","kotlin-coroutine":"Kotlin Coroutine","server-sent-event":"Server Sent Event (SSE)","webflux-websocket":"Webflux Websocket","r2dbc-mysql":"Spring Data R2dbc","reactive-mongodb":"Spring Data Reactive Mongodb",contact:{title:"Contact ↗",type:"page",href:"-",newWindow:!0}}}],flexsearch:{codeblocks:!0},title:"Reactive Streams",headings:c},pageNextRoute:"/reactive-programming/reactive-streams",nextraLayout:t.ZP,themeConfig:n.Z};r.default=(0,i.j)(l)},8426:function(e,r,s){"use strict";var a=s(5893);s(7294);let i={logo:(0,a.jsx)("span",{children:"Docs Spring Webflux"}),project:{link:"https://github.com/chagchagchag/docs-spring-webflux"},docsRepositoryBase:"https://github.com/chagchagchag/docs-spring-webflux",footer:{text:"Nextra Docs Template"}};r.Z=i},5789:function(){}},function(e){e.O(0,[9774,6796,2888,179],function(){return e(e.s=6833)}),_N_E=e.O()}]);