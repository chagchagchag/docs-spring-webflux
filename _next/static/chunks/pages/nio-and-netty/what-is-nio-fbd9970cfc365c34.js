(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[47],{5298:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/nio-and-netty/what-is-nio",function(){return t(3669)}])},3669:function(e,n,t){"use strict";t.r(n),t.d(n,{__toc:function(){return o}});var a=t(5893),r=t(2673),i=t(373),d=t(8426);t(9128);var c=t(2643);let o=[{depth:2,value:"Java NIO",id:"java-nio"},{depth:2,value:"Channel, Buffer 의 개념",id:"channel-buffer-의-개념"},{depth:2,value:"Buffer 클래스의 종류",id:"buffer-클래스의-종류"},{depth:2,value:"Buffer 의 주요 필드",id:"buffer-의-주요-필드"},{depth:2,value:"Java NIO 의 주요 Buffer들 (커널 접근 가능 여부 등)",id:"java-nio-의-주요-buffer들-커널-접근-가능-여부-등"}];function _createMdxContent(e){let n=Object.assign({h2:"h2",p:"p",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,c.a)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"java-nio",children:"Java NIO"}),"\n",(0,a.jsxs)(n.p,{children:["Java NIO 는 ",(0,a.jsx)(n.code,{children:"Java New Input/Output"})," 을 의미합니다. (Non blocking IO 를 의미하는 것은 아닙니다.)",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["Java NIO 는 Java 1.4 에서 처음 도입되었고 파일과 네트워크에 데이터를 읽고 쓸 수 있는 API 를 제공하고 있습니다. 대부분의 I/O에 대해서는 논블로킹 방식의 동기 연산을 지원하지만 Java NIO 역시 File I/O 의 경우는 블로킹 방식의 동기 연산만 지원됩니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["Selector, Channel 기반으로 높은 성능을 제공하는데, 톰캣에서도 NIO가 지원되고 Netty 역시 NIO 기반으로 이루어져 있습니다. 다만 톰캣의 경우 스레드 풀 기반으로 커넥션 풀을 관리하는데 스레드를 그대로 가져다 쓰는 것으로 인해 Netty 에 비해 조금은 무거운 컨테이너입니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["JAVA IO 는 byte 또는 character 기반의 데이터 단위로 데이터를 처리하지만 Java NIO 는 buffer 단위로 데이터를 처리합니다. Java IO 에서는 흔히 잘 알려져 있는 InputStream, OutputStream 을 이용해서 데이터를 처리하지만 Java NIO 에서는 Channel 단위로 데이터를 처리합니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.p,{children:["지금까지의 내용을 정리해보면 아래와 같습니다.",(0,a.jsx)("br",{})]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{}),(0,a.jsx)(n.th,{align:"center",children:"Java NIO"}),(0,a.jsx)(n.th,{align:"center",children:"Java IO"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"데이터 처리 방향"}),(0,a.jsx)(n.td,{align:"center",children:"양방향"}),(0,a.jsx)(n.td,{align:"center",children:"단방향"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"데이터 처리 방식"}),(0,a.jsx)(n.td,{align:"center",children:"Channel"}),(0,a.jsx)(n.td,{align:"center",children:"InputStream, OutputStream"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"데이터 단위"}),(0,a.jsx)(n.td,{align:"center",children:"buffer"}),(0,a.jsx)(n.td,{align:"center",children:"byte, character"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"nonblocking?"}),(0,a.jsx)(n.td,{align:"center",children:"File IO를 제외한 모든 IO에 대해 논블로킹방식의 동기연산을 지원"}),(0,a.jsx)(n.td,{align:"center",children:"모든 IO 연산을 Blocking 방식의 동기연산으로만 수행 가능"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"etc"}),(0,a.jsx)(n.td,{align:"center",children:"Selector 지"}),(0,a.jsx)(n.td,{align:"center"})]})]})]}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"channel-buffer-의-개념",children:"Channel, Buffer 의 개념"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"buffer-클래스의-종류",children:"Buffer 클래스의 종류"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"buffer-의-주요-필드",children:"Buffer 의 주요 필드"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"java-nio-의-주요-buffer들-커널-접근-가능-여부-등",children:"Java NIO 의 주요 Buffer들 (커널 접근 가능 여부 등)"}),"\n",(0,a.jsx)("br",{})]})}let s={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.a)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/nio-and-netty/what-is-nio.mdx",route:"/nio-and-netty/what-is-nio",timestamp:170963663e4,pageMap:[{kind:"Folder",name:"concurrent-programming-basic",route:"/concurrent-programming-basic",children:[{kind:"MdxPage",name:"blocking-vs-nonblocking",route:"/concurrent-programming-basic/blocking-vs-nonblocking"},{kind:"MdxPage",name:"sync-vs-async",route:"/concurrent-programming-basic/sync-vs-async"},{kind:"Meta",data:{"sync-vs-async":"동기 vs 비동기","blocking-vs-nonblocking":"블로킹 vs 논 블로킹"}}]},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"nio-and-netty",route:"/nio-and-netty",children:[{kind:"MdxPage",name:"java-io-java-nio-java-aio",route:"/nio-and-netty/java-io-java-nio-java-aio"},{kind:"MdxPage",name:"java-socket-communication",route:"/nio-and-netty/java-socket-communication"},{kind:"MdxPage",name:"tomcat-vs-netty",route:"/nio-and-netty/tomcat-vs-netty"},{kind:"MdxPage",name:"what-is-nio",route:"/nio-and-netty/what-is-nio"},{kind:"Meta",data:{"java-io-java-nio-java-aio":"Java IO,NIO,AIO","java-socket-communication":"Java 의 소켓 통신방식","what-is-nio":"NIO 의 개념, 장점","tomcat-vs-netty":"Tomcat vs Netty"}}]},{kind:"Folder",name:"r2dbc-mysql",route:"/r2dbc-mysql",children:[{kind:"MdxPage",name:"example",route:"/r2dbc-mysql/example"},{kind:"MdxPage",name:"what-is-r2dbc",route:"/r2dbc-mysql/what-is-r2dbc"},{kind:"Meta",data:{"what-is-r2dbc":"R2DBC 란?",example:"예제"}}]},{kind:"Folder",name:"reactive-mongodb",route:"/reactive-mongodb",children:[{kind:"MdxPage",name:"example",route:"/reactive-mongodb/example"},{kind:"Meta",data:{example:"예제"}}]},{kind:"Folder",name:"reactive-programming",route:"/reactive-programming",children:[{kind:"MdxPage",name:"intro",route:"/reactive-programming/intro"},{kind:"Meta",data:{intro:"intro"}}]},{kind:"Folder",name:"server-sent-event",route:"/server-sent-event",children:[{kind:"MdxPage",name:"example",route:"/server-sent-event/example"},{kind:"MdxPage",name:"what-is-sse",route:"/server-sent-event/what-is-sse"},{kind:"Meta",data:{"what-is-sse":"SSE (Server Sent Event) 의 개념",example:"예제코드"}}]},{kind:"Folder",name:"webflux-websocket",route:"/webflux-websocket",children:[{kind:"MdxPage",name:"example",route:"/webflux-websocket/example"},{kind:"Meta",data:{example:"예제"}}]},{kind:"Meta",data:{index:"Introduction","concurrent-programming-basic":"동시성 프로그래밍 개념들","nio-and-netty":"NIO, Netty","reactive-programming":"Reactive Programming","server-sent-event":"Server Sent Event (SSE)","webflux-websocket":"Webflux Websocket","r2dbc-mysql":"Spring Data R2dbc",contact:{title:"Contact ↗",type:"page",href:"-",newWindow:!0}}}],flexsearch:{codeblocks:!0},title:"What Is Nio",headings:o},pageNextRoute:"/nio-and-netty/what-is-nio",nextraLayout:i.ZP,themeConfig:d.Z};n.default=(0,r.j)(s)},8426:function(e,n,t){"use strict";var a=t(5893);t(7294);let r={logo:(0,a.jsx)("span",{children:"Docs Spring Webflux"}),project:{link:"https://github.com/chagchagchag/docs-spring-webflux"},docsRepositoryBase:"https://github.com/chagchagchag/docs-spring-webflux",footer:{text:"Nextra Docs Template"}};n.Z=r},5789:function(){}},function(e){e.O(0,[774,796,888,179],function(){return e(e.s=5298)}),_N_E=e.O()}]);