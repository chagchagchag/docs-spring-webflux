(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[320],{9233:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/nio-and-netty/java-io-java-nio-java-aio",function(){return n(722)}])},722:function(e,a,n){"use strict";n.r(a),n.d(a,{__toc:function(){return d}});var t=n(5893),i=n(2673),r=n(373),o=n(8426);n(9128);var c=n(2643);let d=[{depth:2,value:"Java IO vs Java NIO vs Java AIO",id:"java-io-vs-java-nio-vs-java-aio"},{depth:2,value:"함수 호출 관점",id:"함수-호출-관점"},{depth:2,value:"IO 모델 관점",id:"io-모델-관점"},{depth:2,value:"Java IO",id:"java-io"}];function _createMdxContent(e){let a=Object.assign({h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",p:"p",ul:"ul",li:"li"},(0,c.a)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"java-io-vs-java-nio-vs-java-aio",children:"Java IO vs Java NIO vs Java AIO"}),"\n",(0,t.jsx)(a.h2,{id:"함수-호출-관점",children:"함수 호출 관점"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{}),(0,t.jsx)(a.th,{align:"center",children:"동기"}),(0,t.jsx)(a.th,{align:"center",children:"비동기"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Blocking"}),(0,t.jsx)(a.td,{align:"center",children:"Java IO"}),(0,t.jsx)(a.td,{align:"center",children:"X"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Non-Blocking"}),(0,t.jsxs)(a.td,{align:"center",children:["Java NIO",(0,t.jsx)("br",{}),"(File IO 는 Non Blocking 불가)"]}),(0,t.jsx)(a.td,{align:"center",children:"Java AIO"})]})]})]}),"\n",(0,t.jsx)(a.p,{children:"함수의 호출로만 봤을 때 Java IO, Java NIO, Java AIO 는 각각 아래와 같습니다."}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Java IO : 블로킹 방식의 동기 연산입니다."}),"\n",(0,t.jsx)(a.li,{children:"Java NIO : 논블로킹 방식의 동기 연산입니다. 다만, File IO 는 Java NIO 에서도 Non Blocking 이 불가능합니다."}),"\n",(0,t.jsx)(a.li,{children:"Java AIO : 논블로킹 방식의 비동기 연산이 가능합니다."}),"\n"]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(a.h2,{id:"io-모델-관점",children:"IO 모델 관점"}),"\n",(0,t.jsxs)(a.table,{children:[(0,t.jsx)(a.thead,{children:(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.th,{}),(0,t.jsx)(a.th,{align:"center",children:"동기"}),(0,t.jsx)(a.th,{align:"center",children:"비동기"})]})}),(0,t.jsxs)(a.tbody,{children:[(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Blocking"}),(0,t.jsx)(a.td,{align:"center",children:"Java IO"}),(0,t.jsx)(a.td,{align:"center",children:"X"})]}),(0,t.jsxs)(a.tr,{children:[(0,t.jsx)(a.td,{children:"Non-Blocking"}),(0,t.jsx)(a.td,{align:"center",children:"Java NIO, Java AIO"}),(0,t.jsx)(a.td,{align:"center",children:"X"})]})]})]}),"\n",(0,t.jsx)(a.p,{children:"IO 모델 방식으로 따져봤을 때 Java IO, Java NIO, Java AIO 는 각각 아래와 같습니다."}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Java IO : 블로킹 기반의 동기 연산입니다."}),"\n",(0,t.jsx)(a.li,{children:"Java NIO : 논블로킹 방식의 동기 연산입니다."}),"\n",(0,t.jsx)(a.li,{children:"JAVA AIO : Java AIO 역시 IO 연산작업에 있어서는 블로킹 방식의 동기연산이 됩니다."}),"\n"]}),"\n",(0,t.jsx)(a.h2,{id:"java-io",children:"Java IO"}),"\n",(0,t.jsx)(a.p,{children:"Java IO 는 Java 1.0 부터 처음 도입되었습니다. Java IO 는 블로킹 방식의 동기연산을 수행합니다. Java IO는 파일과 네트워크에 데이터를 읽고 쓸 수 있는 InputStream, OutputStream API를 제공합니다."})]})}let s={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:a}=Object.assign({},(0,c.a)(),e.components);return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)},pageOpts:{filePath:"pages/nio-and-netty/java-io-java-nio-java-aio.mdx",route:"/nio-and-netty/java-io-java-nio-java-aio",timestamp:1709479636e3,pageMap:[{kind:"Folder",name:"concurrent-programming-basic",route:"/concurrent-programming-basic",children:[{kind:"MdxPage",name:"blocking-vs-nonblocking",route:"/concurrent-programming-basic/blocking-vs-nonblocking"},{kind:"MdxPage",name:"completable-future",route:"/concurrent-programming-basic/completable-future"},{kind:"MdxPage",name:"completable-stage",route:"/concurrent-programming-basic/completable-stage"},{kind:"MdxPage",name:"sync-vs-async",route:"/concurrent-programming-basic/sync-vs-async"},{kind:"Meta",data:{"sync-vs-async":"동기 vs 비동기","blocking-vs-nonblocking":"블로킹 vs 논 블로킹","completable-future":"CompletableFuture","completable-stage":"CompletableStage"}}]},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"nio-and-netty",route:"/nio-and-netty",children:[{kind:"MdxPage",name:"java-io-java-nio-java-aio",route:"/nio-and-netty/java-io-java-nio-java-aio"},{kind:"MdxPage",name:"java-nio-socket-communication",route:"/nio-and-netty/java-nio-socket-communication"},{kind:"MdxPage",name:"tomcat-vs-netty",route:"/nio-and-netty/tomcat-vs-netty"},{kind:"MdxPage",name:"what-is-aio",route:"/nio-and-netty/what-is-aio"},{kind:"MdxPage",name:"what-is-nio",route:"/nio-and-netty/what-is-nio"},{kind:"Meta",data:{"java-io-java-nio-java-aio":"Java IO,NIO,AIO","what-is-nio":"NIO 의 개념, 특징, 주요 클래스","java-nio-socket-communication":"Java NIO 소켓통신","what-is-aio":"AIO 의 개념, 특징, 예제","tomcat-vs-netty":"Tomcat vs Netty"}}]},{kind:"Folder",name:"r2dbc-mysql",route:"/r2dbc-mysql",children:[{kind:"MdxPage",name:"example",route:"/r2dbc-mysql/example"},{kind:"MdxPage",name:"what-is-r2dbc",route:"/r2dbc-mysql/what-is-r2dbc"},{kind:"Meta",data:{"what-is-r2dbc":"R2DBC 란?",example:"예제"}}]},{kind:"Folder",name:"reactive-mongodb",route:"/reactive-mongodb",children:[{kind:"MdxPage",name:"example",route:"/reactive-mongodb/example"},{kind:"Meta",data:{example:"예제"}}]},{kind:"Folder",name:"reactive-programming",route:"/reactive-programming",children:[{kind:"MdxPage",name:"intro",route:"/reactive-programming/intro"},{kind:"MdxPage",name:"java-nio-bad-point",route:"/reactive-programming/java-nio-bad-point"},{kind:"MdxPage",name:"netflix-rxjava-story",route:"/reactive-programming/netflix-rxjava-story"},{kind:"MdxPage",name:"proactor-pattern",route:"/reactive-programming/proactor-pattern"},{kind:"MdxPage",name:"reactive-streams-libraries",route:"/reactive-programming/reactive-streams-libraries"},{kind:"MdxPage",name:"reactive-streams",route:"/reactive-programming/reactive-streams"},{kind:"MdxPage",name:"reactor-pattern",route:"/reactive-programming/reactor-pattern"},{kind:"MdxPage",name:"what-is-epoll",route:"/reactive-programming/what-is-epoll"},{kind:"MdxPage",name:"what-is-reactive",route:"/reactive-programming/what-is-reactive"},{kind:"Meta",data:{intro:"intro","what-is-reactive":"Reactive란?","netflix-rxjava-story":"Netflix RxJava 이야기","reactive-streams":"Reactive Streams","reactive-streams-libraries":"Reactive Streams 라이브러리들","java-nio-bad-point":"Java NIO 의 논블로킹 방식 동기연산의 문제점","what-is-epoll":"epoll 이란?","reactor-pattern":"reactor 패턴","proactor-pattern":"proactor 패턴"}}]},{kind:"Folder",name:"server-sent-event",route:"/server-sent-event",children:[{kind:"MdxPage",name:"example",route:"/server-sent-event/example"},{kind:"MdxPage",name:"what-is-sse",route:"/server-sent-event/what-is-sse"},{kind:"Meta",data:{"what-is-sse":"SSE (Server Sent Event) 의 개념",example:"예제코드"}}]},{kind:"Folder",name:"webflux-websocket",route:"/webflux-websocket",children:[{kind:"MdxPage",name:"example",route:"/webflux-websocket/example"},{kind:"Meta",data:{example:"예제"}}]},{kind:"Meta",data:{index:"Introduction","concurrent-programming-basic":"동시성 프로그래밍 개념들","nio-and-netty":"NIO, Netty","reactive-programming":"Reactive Programming","server-sent-event":"Server Sent Event (SSE)","webflux-websocket":"Webflux Websocket","r2dbc-mysql":"Spring Data R2dbc",contact:{title:"Contact ↗",type:"page",href:"-",newWindow:!0}}}],flexsearch:{codeblocks:!0},title:"Java Io Java Nio Java Aio",headings:d},pageNextRoute:"/nio-and-netty/java-io-java-nio-java-aio",nextraLayout:r.ZP,themeConfig:o.Z};a.default=(0,i.j)(s)},8426:function(e,a,n){"use strict";var t=n(5893);n(7294);let i={logo:(0,t.jsx)("span",{children:"Docs Spring Webflux"}),project:{link:"https://github.com/chagchagchag/docs-spring-webflux"},docsRepositoryBase:"https://github.com/chagchagchag/docs-spring-webflux",footer:{text:"Nextra Docs Template"}};a.Z=i},5789:function(){}},function(e){e.O(0,[774,796,888,179],function(){return e(e.s=9233)}),_N_E=e.O()}]);